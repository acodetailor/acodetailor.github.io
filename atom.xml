<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sam</title>
  
  <subtitle>用我的双手，成就你的梦想。一库~</subtitle>
  <link href="https://acodetailor.github.io/atom.xml" rel="self"/>
  
  <link href="https://acodetailor.github.io/"/>
  <updated>2021-04-02T03:53:26.061Z</updated>
  <id>https://acodetailor.github.io/</id>
  
  <author>
    <name>Sam</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Kubernetes CRD -- kubebuilder搭建</title>
    <link href="https://acodetailor.github.io/2021/04/02/k8s_crd/"/>
    <id>https://acodetailor.github.io/2021/04/02/k8s_crd/</id>
    <published>2021-04-02T02:17:18.350Z</published>
    <updated>2021-04-02T03:53:26.061Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>官方解释：CustomResourceDefinition API 资源允许你定义定制资源。 定义 CRD 对象的操作会使用你所设定的名字和模式定义（Schema）<br>创建一个新的定制资源， Kubernetes API 负责为你的定制资源提供存储和访问服务。 CRD 对象的名称必须是合法的 DNS 子域名。</p><p>DNS子域名规则如下：</p><ul><li>不能超过253个字符</li><li>只能包含小写字母、数字，以及’-‘ 和 ‘.’</li><li>须以字母数字开头</li><li>须以字母数字结尾</li></ul><p>简单来说，你可以定义像k8s原生资源如deployment、service一样定义自己的资源，而k8s会为你提供存储（ETCD）,访问（kube-apiserver）。</p><h1 id="脚手架"><a href="#脚手架" class="headerlink" title="脚手架"></a>脚手架</h1><p>kubebuilder 和 operator sdk, 个人只使用过kubebuilder。</p><h1 id="安装kubebuilder"><a href="#安装kubebuilder" class="headerlink" title="安装kubebuilder"></a>安装kubebuilder</h1><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><p>1、docker<br>2、go 建议版本在1.12以上，支持 go mod<br>3、kustomize</p><h3 id="代理配置"><a href="#代理配置" class="headerlink" title="代理配置"></a>代理配置</h3><p>配置一下 终端代理，因为初始化时会拉去go的依赖包。<br>go 1.12之下开启 go module</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> GOPROXY=https://goproxy.io</span><br><span class="line"><span class="built_in">export</span> GO111MODULE=on</span><br></pre></td></tr></table></figure><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><strong>一、安装kubebuilder</strong><br>执行如下命令。（如果curl下载失败，大概率是网络原因，可以手动下载，解压到指定目录）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">os= $(go env GOOS)</span><br><span class="line">arch=$(go env GOARCH)</span><br><span class="line">curl -L https://go.kubebuilder.io/dl/2.3.1/<span class="variable">$&#123;os&#125;</span>/<span class="variable">$&#123;arch&#125;</span> | tar -xz -C /tmp/</span><br><span class="line">sudo mv /tmp/kubebuilder_2.3.1_<span class="variable">$&#123;os&#125;</span>_<span class="variable">$&#123;arch&#125;</span> /usr/<span class="built_in">local</span>/kubebuilder</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/usr/<span class="built_in">local</span>/kubebuilder/bin</span><br></pre></td></tr></table></figure><p><strong>二、安装kustomize</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install kustomize </span><br></pre></td></tr></table></figure><p><strong>三、安装完成后查看版本信息</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ kubebuilder version</span><br><span class="line">Version: version.Version&#123;KubeBuilderVersion:<span class="string">&quot;2.3.1&quot;</span>, KubernetesVendor:<span class="string">&quot;1.16.4&quot;</span>, GitCommit:<span class="string">&quot;8b53abeb4280186e494b726edf8f54ca7aa64a49&quot;</span>, BuildDate:<span class="string">&quot;2020-03-26T16:42:00Z&quot;</span>, GoOs:<span class="string">&quot;unknown&quot;</span>, GoArch:<span class="string">&quot;unknown&quot;</span>&#125;</span><br><span class="line"><span class="comment"># sam @ MacBook-Pro-2 in ~/tf/alitest [10:45:37]</span></span><br><span class="line">$ kustomize version</span><br><span class="line">&#123;Version:kustomize/v3.8.2 GitCommit:e2973f6ecc9be6187cfd5ecf5e180f842249b3c6 BuildDate:2020-09-02T07:01:55+01:00 GoOs:darwin GoArch:amd64&#125;</span><br></pre></td></tr></table></figure><p><strong>四、初始化工程</strong>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubebuilder init --domain my.crd.com  //初始化工程</span><br><span class="line">kubebuilder create api --group custom --version v1 --kind Unit //生成脚手架代码</span><br></pre></td></tr></table></figure><p> <strong>group</strong>: 比如资源文件的apps/v1, apps即为分组，还有其他extensions、cores等。  </p><p> <strong>version</strong>: 顾名思义、v1即为版本。  </p><p> <strong>kind</strong>: API “顶级”资源对象的类型，每个资源对象都需要 Kind 来区分它自身代表的资源类型。比如 pod,deployment.  </p><p> <strong>resource</strong>: 通过 HTTP 协议以 JSON 格式发送或者读取的资源展现形式，可以以单个资源对象展现。  </p><p> <strong>GVK(group、version、kind)</strong>:<br>同 Kind 不止可以出现在同一分组的不同版本中，如 apps/v1beta1 与 apps/v1，它还可能出现在不同的分组中，例如 Deployment 开始以 alpha 的特性出现在 extensions 分组，GA 之后被推进到 apps 组，所以为了严格区分不同的 Kind，需要组合 API Group、API Version 与 Kind 成为 GVK。  </p><p> <strong>GVR(group、version、resource)</strong>:<br>GVR 常用于组合成 RESTful API 请求路径。例如，针对应用程序 v1 部署的 RESTful API 请求如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /apis/apps/v1/namespaces/&#123;namespace&#125;/deployments/&#123;name&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h1&gt;&lt;p&gt;官方解释：CustomResourceDefinition API 资源允许你定义定制资源。 定义 CRD 对象的操作会使用你所设定的名字和</summary>
      
    
    
    
    <category term="k8s" scheme="https://acodetailor.github.io/categories/k8s/"/>
    
    
    <category term="k8s" scheme="https://acodetailor.github.io/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>Terraform介绍</title>
    <link href="https://acodetailor.github.io/2021/03/30/terraform/"/>
    <id>https://acodetailor.github.io/2021/03/30/terraform/</id>
    <published>2021-03-30T02:38:39.714Z</published>
    <updated>2021-04-01T08:23:43.207Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h2><p>Terraform是IT 基础架构自动化编排工具，它的口号是 “Write,Plan, and create Infrastructure as Code”, 基础架构即代码。</p><p>怎么理解这句话，我们先假设在没有Terraform的年代我们是怎么操作云服务。</p><p>方式一：直接登入到云平台的管控页面，人工点击按钮、键盘敲入输入参数的方式来操作，这种方式对于单个或几个云服务器还可以维护的过来，但是当云服务规模达到几十几百甚至上千以后，明显这种方式对于人力来说变得不再现实，而且容易误操作。</p><p>方式二：云平台提供了各种SDK，将对云服务的操作拆解成一个个的API供使用厂商通过代码来调用。这种方式明显好于方式一，使大批量操作变得可能，而且代码测试通过后可以避免人为误操作。但是随之带来的问题是厂商们需要专业的开发人员（Java、Python、Php、Ruby等），而且对复杂云平台的操作需要写大量的代码。</p><p>方式三：云平台提供了命令行操作云服务的工具，例如AWS CLI，这样租户厂商不再需要软件开发人员就可以实现对平台的命令操作。命令就像Sql一样，使用增删改查等操作元素来管理云。</p><p>方式四：Terraform主角登场，如果说方式三中CLI是命令式操作，需要明确的告知云服务本次操作是查询、新增、修改、还是删除，那么Terraform就是目的式操作，在本地维护了一份云服务状态的模板，模板编排成什么样子的，云服务就是什么样子的。对比方式三的优势是我们只需要专注于编排结果即可，不需要关心用什么命令去操作。</p><p>Terraform的意义在于，通过同一套规则和命令来操作不同的云平台（包括私有云）。</p><h2 id="Terraform知识准备："><a href="#Terraform知识准备：" class="headerlink" title="Terraform知识准备："></a>Terraform知识准备：</h2><p>核心文件有2个，一个是编排文件，一个是状态文件</p><p>main.tf文件：是业务编排的主文件，定制了一系列的编排规则，后面会有详细介绍。</p><p>terraform.tfstate：本地状态文件，相当于本地的云服务状态的备份，会影响terraform的执行计划。</p><p>如果本地状态与云服务状态不一样时会怎样？</p><p>这个大家不需要担心，前面介绍过Terraform是目的式的编排，会按照预设结果完成编排并最终同步更新本地文件。</p><p>Provider：Terraform定制的一套接口，跟OpenStack里Dirver、Java里Interface的概念是一样的，阿里云、AWS、私有云等如果想接入进来被Terraform编排和管理就要实现一套Provider，而这些实现对于Terraform的顶层使用者来说是无感知的。</p><p>Module：可以理解为provider的集合，完成一个完整的功能。</p><h2 id="相关命令："><a href="#相关命令：" class="headerlink" title="相关命令："></a>相关命令：</h2><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>初始化本地环境，下载provider,校验terraform版本等.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ terraform init              //自动下载最新的provider</span><br><span class="line">$ terraform init -plugin-dir  //指定provider目录</span><br></pre></td></tr></table></figure><h2 id="plan"><a href="#plan" class="headerlink" title="plan"></a>plan</h2><p>比较云端资源和本地state资源.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ terraform plan</span><br></pre></td></tr></table></figure><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>将修改部署到云端资源.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ terraform apply</span><br></pre></td></tr></table></figure><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><p>将云端资源删除.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ terraform destory</span><br></pre></td></tr></table></figure><h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p>创建阿里云用户组、资源组并且配置只读权限。<br>注: alicloud : 阿里云provider名字，不能修改。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">provider <span class="string">&quot;alicloud&quot;</span> &#123;</span><br><span class="line">   access_key = <span class="string">&quot;*******************&quot;</span></span><br><span class="line">   secret_key = <span class="string">&quot;*************************&quot;</span></span><br><span class="line">   region = <span class="string">&quot;cn-beijing&quot;</span></span><br><span class="line"> &#125;</span><br><span class="line"> resource <span class="string">&quot;alicloud_ram_group&quot;</span> <span class="string">&quot;group&quot;</span> &#123;</span><br><span class="line">   name     = <span class="string">&quot;test_group_1000&quot;</span></span><br><span class="line">   force    = <span class="literal">true</span></span><br><span class="line"> &#125;</span><br><span class="line"> resource <span class="string">&quot;alicloud_ram_group_policy_attachment&quot;</span> <span class="string">&quot;attach&quot;</span> &#123;</span><br><span class="line">   policy_name = <span class="string">&quot;ReadOnlyAccess&quot;</span></span><br><span class="line">   policy_type = <span class="string">&quot;System&quot;</span></span><br><span class="line">   group_name  = alicloud_ram_group.group.name</span><br><span class="line"> &#125;</span><br><span class="line"> resource <span class="string">&quot;alicloud_resource_manager_resource_group&quot;</span> <span class="string">&quot;example&quot;</span> &#123;</span><br><span class="line">   resource_group_name = <span class="string">&quot;tftest01&quot;</span></span><br><span class="line">   display_name        = <span class="string">&quot;tftest01&quot;</span></span><br><span class="line"> &#125;</span><br><span class="line"> data <span class="string">&quot;alicloud_account&quot;</span> <span class="string">&quot;example&quot;</span> &#123;&#125;</span><br><span class="line"> resource <span class="string">&quot;alicloud_resource_manager_policy_attachment&quot;</span> <span class="string">&quot;example&quot;</span> &#123;</span><br><span class="line">   policy_name       = <span class="string">&quot;ReadOnlyAccess&quot;</span></span><br><span class="line">   policy_type       = <span class="string">&quot;System&quot;</span></span><br><span class="line">   principal_name    = format(<span class="string">&quot;%s@group.%s.onaliyun.com&quot;</span>, alicloud_ram_group.group.name, data.alicloud_account.example.id)</span><br><span class="line">   principal_type    = <span class="string">&quot;IMSGroup&quot;</span></span><br><span class="line">   resource_group_id = alicloud_resource_manager_resource_group.example.id</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>1、配置terraform自动补全</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ terraform -install-autocomplete</span><br></pre></td></tr></table></figure><p>2、查看terraform的日志</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">export</span> TF_LOG=TRACE</span><br><span class="line">$ <span class="built_in">export</span> TF_LOG_PATH=/var/<span class="built_in">log</span>/terraform.log</span><br></pre></td></tr></table></figure><p>3、terraform 通过配置文件或者环境变量进行配置<br>文件目录(自己创建)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="variable">$HOME</span>/.terraformrc </span><br></pre></td></tr></table></figure><p>环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ os.Setenv(<span class="string">&quot;TF_PLUGIN_CACHE_DIR&quot;</span>, <span class="string">&quot;/tmp/provider&quot;</span>) // add provider cache</span><br></pre></td></tr></table></figure><h2 id="state文件存储，支持consul、oss等"><a href="#state文件存储，支持consul、oss等" class="headerlink" title="state文件存储，支持consul、oss等"></a>state文件存储，支持consul、oss等</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">terraform &#123;</span><br><span class="line">  backend <span class="string">&quot;consul&quot;</span> &#123;</span><br><span class="line">    address = <span class="string">&quot;consul.example.com&quot;</span></span><br><span class="line">    scheme  = <span class="string">&quot;https&quot;</span></span><br><span class="line">    path    = <span class="string">&quot;full/path&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">data <span class="string">&quot;terraform_remote_state&quot;</span> <span class="string">&quot;foo&quot;</span> &#123;</span><br><span class="line">  backend = <span class="string">&quot;consul&quot;</span></span><br><span class="line">  config = &#123;</span><br><span class="line">    path = <span class="string">&quot;full/path&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考： <a href="https://theithollow.com/2018/05/21/using-hashicorp-consul-to-store-terraform-state/">https://theithollow.com/2018/05/21/using-hashicorp-consul-to-store-terraform-state/</a></p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><ul><li><p>单行注释以 # 开头</p></li><li><p>多行注释用 /* 和 */ 换行</p></li><li><p>值使用 key = value 的语法分配（空格无关紧要）。该值可以是任何原语（字符串，数字，布尔值），列表或映射。</p></li><li><p>字符串为双引号。</p></li><li><p>字符串可以使用 ${} 包装的语法对其他值进行插值，例如 ${var.foo} 。此处记录了完整的内插语法。</p></li><li><p>多行字符串可以使用外壳样式的“ here doc”语法，该字符串以类似 &lt;&lt;EOF 的标记开头，然后以 EOF 结尾。字符串和结束标志的线路必须不能缩进。</p></li><li><p>假定数字以10为底。如果为数字加上 0x 前缀，则将其视为十六进制数字。</p></li><li><p>布尔值： true ， false 。</p></li><li><p>原始类型的列表可以用方括号（ [] ）制成。示例： [“foo”, “bar”, “baz”] 。</p></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://runebook.dev/zh-CN/docs/terraform/-index-#Alicloud">https://runebook.dev/zh-CN/docs/terraform/-index-#Alicloud</a></li><li><a href="https://www.terraform.io/">https://www.terraform.io/</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;简介：&quot;&gt;&lt;a href=&quot;#简介：&quot; class=&quot;headerlink&quot; title=&quot;简介：&quot;&gt;&lt;/a&gt;简介：&lt;/h2&gt;&lt;p&gt;Terraform是IT 基础架构自动化编排工具，它的口号是 “Write,Plan, and create Infrastruct</summary>
      
    
    
    
    <category term="Cloud" scheme="https://acodetailor.github.io/categories/Cloud/"/>
    
    
    <category term="terraform" scheme="https://acodetailor.github.io/tags/terraform/"/>
    
  </entry>
  
</feed>
