{"meta":{"title":"Sam","subtitle":"用我的双手，成就你的梦想。一库~","description":"杂记","author":"Sam","url":"https://acodetailor.github.io","root":"/"},"pages":[{"title":"404 Not Found：该页无法显示","date":"2021-03-30T07:24:39.640Z","updated":"2021-03-30T07:24:39.640Z","comments":false,"path":"/404.html","permalink":"https://acodetailor.github.io/404.html","excerpt":"","text":""},{"title":"书单","date":"2021-03-30T07:24:39.645Z","updated":"2021-03-30T07:24:39.644Z","comments":false,"path":"books/index.html","permalink":"https://acodetailor.github.io/books/index.html","excerpt":"","text":""},{"title":"关于","date":"2021-03-30T07:24:39.644Z","updated":"2021-03-30T07:24:39.643Z","comments":false,"path":"about/index.html","permalink":"https://acodetailor.github.io/about/index.html","excerpt":"","text":"个人详细介绍"},{"title":"分类","date":"2021-03-30T07:24:39.645Z","updated":"2021-03-30T07:24:39.645Z","comments":false,"path":"categories/index.html","permalink":"https://acodetailor.github.io/categories/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2021-03-30T07:24:39.646Z","updated":"2021-03-30T07:24:39.646Z","comments":true,"path":"links/index.html","permalink":"https://acodetailor.github.io/links/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2021-03-30T07:24:39.647Z","updated":"2021-03-30T07:24:39.647Z","comments":false,"path":"repository/index.html","permalink":"https://acodetailor.github.io/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"2021-03-30T07:24:39.648Z","updated":"2021-03-30T07:24:39.648Z","comments":false,"path":"tags/index.html","permalink":"https://acodetailor.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Kubernetes CRD -- kubebuilder搭建","slug":"k8s_crd","date":"2021-04-02T02:17:18.350Z","updated":"2021-04-02T03:53:26.061Z","comments":true,"path":"2021/04/02/k8s_crd/","link":"","permalink":"https://acodetailor.github.io/2021/04/02/k8s_crd/","excerpt":"","text":"概念官方解释：CustomResourceDefinition API 资源允许你定义定制资源。 定义 CRD 对象的操作会使用你所设定的名字和模式定义（Schema）创建一个新的定制资源， Kubernetes API 负责为你的定制资源提供存储和访问服务。 CRD 对象的名称必须是合法的 DNS 子域名。 DNS子域名规则如下： 不能超过253个字符 只能包含小写字母、数字，以及’-‘ 和 ‘.’ 须以字母数字开头 须以字母数字结尾 简单来说，你可以定义像k8s原生资源如deployment、service一样定义自己的资源，而k8s会为你提供存储（ETCD）,访问（kube-apiserver）。 脚手架kubebuilder 和 operator sdk, 个人只使用过kubebuilder。 安装kubebuilder依赖1、docker2、go 建议版本在1.12以上，支持 go mod3、kustomize 代理配置配置一下 终端代理，因为初始化时会拉去go的依赖包。go 1.12之下开启 go module 12export GOPROXY=https://goproxy.ioexport GO111MODULE=on 安装一、安装kubebuilder执行如下命令。（如果curl下载失败，大概率是网络原因，可以手动下载，解压到指定目录）。 12345os= $(go env GOOS)arch=$(go env GOARCH)curl -L https://go.kubebuilder.io/dl/2.3.1/$&#123;os&#125;/$&#123;arch&#125; | tar -xz -C /tmp/sudo mv /tmp/kubebuilder_2.3.1_$&#123;os&#125;_$&#123;arch&#125; /usr/local/kubebuilderexport PATH=$PATH:/usr/local/kubebuilder/bin 二、安装kustomize 1brew install kustomize 三、安装完成后查看版本信息 12345$ kubebuilder versionVersion: version.Version&#123;KubeBuilderVersion:&quot;2.3.1&quot;, KubernetesVendor:&quot;1.16.4&quot;, GitCommit:&quot;8b53abeb4280186e494b726edf8f54ca7aa64a49&quot;, BuildDate:&quot;2020-03-26T16:42:00Z&quot;, GoOs:&quot;unknown&quot;, GoArch:&quot;unknown&quot;&#125;# sam @ MacBook-Pro-2 in ~/tf/alitest [10:45:37]$ kustomize version&#123;Version:kustomize/v3.8.2 GitCommit:e2973f6ecc9be6187cfd5ecf5e180f842249b3c6 BuildDate:2020-09-02T07:01:55+01:00 GoOs:darwin GoArch:amd64&#125; 四、初始化工程 12kubebuilder init --domain my.crd.com //初始化工程kubebuilder create api --group custom --version v1 --kind Unit //生成脚手架代码 group: 比如资源文件的apps/v1, apps即为分组，还有其他extensions、cores等。 version: 顾名思义、v1即为版本。 kind: API “顶级”资源对象的类型，每个资源对象都需要 Kind 来区分它自身代表的资源类型。比如 pod,deployment. resource: 通过 HTTP 协议以 JSON 格式发送或者读取的资源展现形式，可以以单个资源对象展现。 GVK(group、version、kind):同 Kind 不止可以出现在同一分组的不同版本中，如 apps/v1beta1 与 apps/v1，它还可能出现在不同的分组中，例如 Deployment 开始以 alpha 的特性出现在 extensions 分组，GA 之后被推进到 apps 组，所以为了严格区分不同的 Kind，需要组合 API Group、API Version 与 Kind 成为 GVK。 GVR(group、version、resource):GVR 常用于组合成 RESTful API 请求路径。例如，针对应用程序 v1 部署的 RESTful API 请求如下所示： 1GET /apis/apps/v1/namespaces/&#123;namespace&#125;/deployments/&#123;name&#125;","categories":[{"name":"k8s","slug":"k8s","permalink":"https://acodetailor.github.io/categories/k8s/"}],"tags":[{"name":"k8s","slug":"k8s","permalink":"https://acodetailor.github.io/tags/k8s/"}]},{"title":"Terraform介绍","slug":"terraform","date":"2021-03-30T02:38:39.714Z","updated":"2021-04-01T08:23:43.207Z","comments":true,"path":"2021/03/30/terraform/","link":"","permalink":"https://acodetailor.github.io/2021/03/30/terraform/","excerpt":"","text":"简介：Terraform是IT 基础架构自动化编排工具，它的口号是 “Write,Plan, and create Infrastructure as Code”, 基础架构即代码。 怎么理解这句话，我们先假设在没有Terraform的年代我们是怎么操作云服务。 方式一：直接登入到云平台的管控页面，人工点击按钮、键盘敲入输入参数的方式来操作，这种方式对于单个或几个云服务器还可以维护的过来，但是当云服务规模达到几十几百甚至上千以后，明显这种方式对于人力来说变得不再现实，而且容易误操作。 方式二：云平台提供了各种SDK，将对云服务的操作拆解成一个个的API供使用厂商通过代码来调用。这种方式明显好于方式一，使大批量操作变得可能，而且代码测试通过后可以避免人为误操作。但是随之带来的问题是厂商们需要专业的开发人员（Java、Python、Php、Ruby等），而且对复杂云平台的操作需要写大量的代码。 方式三：云平台提供了命令行操作云服务的工具，例如AWS CLI，这样租户厂商不再需要软件开发人员就可以实现对平台的命令操作。命令就像Sql一样，使用增删改查等操作元素来管理云。 方式四：Terraform主角登场，如果说方式三中CLI是命令式操作，需要明确的告知云服务本次操作是查询、新增、修改、还是删除，那么Terraform就是目的式操作，在本地维护了一份云服务状态的模板，模板编排成什么样子的，云服务就是什么样子的。对比方式三的优势是我们只需要专注于编排结果即可，不需要关心用什么命令去操作。 Terraform的意义在于，通过同一套规则和命令来操作不同的云平台（包括私有云）。 Terraform知识准备：核心文件有2个，一个是编排文件，一个是状态文件 main.tf文件：是业务编排的主文件，定制了一系列的编排规则，后面会有详细介绍。 terraform.tfstate：本地状态文件，相当于本地的云服务状态的备份，会影响terraform的执行计划。 如果本地状态与云服务状态不一样时会怎样？ 这个大家不需要担心，前面介绍过Terraform是目的式的编排，会按照预设结果完成编排并最终同步更新本地文件。 Provider：Terraform定制的一套接口，跟OpenStack里Dirver、Java里Interface的概念是一样的，阿里云、AWS、私有云等如果想接入进来被Terraform编排和管理就要实现一套Provider，而这些实现对于Terraform的顶层使用者来说是无感知的。 Module：可以理解为provider的集合，完成一个完整的功能。 相关命令：初始化初始化本地环境，下载provider,校验terraform版本等. 12$ terraform init //自动下载最新的provider$ terraform init -plugin-dir //指定provider目录 plan比较云端资源和本地state资源. 1$ terraform plan 部署将修改部署到云端资源. 1$ terraform apply 删除将云端资源删除. 1$ terraform destory Example创建阿里云用户组、资源组并且配置只读权限。注: alicloud : 阿里云provider名字，不能修改。 1234567891011121314151617181920212223242526provider &quot;alicloud&quot; &#123; access_key = &quot;*******************&quot; secret_key = &quot;*************************&quot; region = &quot;cn-beijing&quot; &#125; resource &quot;alicloud_ram_group&quot; &quot;group&quot; &#123; name = &quot;test_group_1000&quot; force = true &#125; resource &quot;alicloud_ram_group_policy_attachment&quot; &quot;attach&quot; &#123; policy_name = &quot;ReadOnlyAccess&quot; policy_type = &quot;System&quot; group_name = alicloud_ram_group.group.name &#125; resource &quot;alicloud_resource_manager_resource_group&quot; &quot;example&quot; &#123; resource_group_name = &quot;tftest01&quot; display_name = &quot;tftest01&quot; &#125; data &quot;alicloud_account&quot; &quot;example&quot; &#123;&#125; resource &quot;alicloud_resource_manager_policy_attachment&quot; &quot;example&quot; &#123; policy_name = &quot;ReadOnlyAccess&quot; policy_type = &quot;System&quot; principal_name = format(&quot;%s@group.%s.onaliyun.com&quot;, alicloud_ram_group.group.name, data.alicloud_account.example.id) principal_type = &quot;IMSGroup&quot; resource_group_id = alicloud_resource_manager_resource_group.example.id &#125; 其他1、配置terraform自动补全 1$ terraform -install-autocomplete 2、查看terraform的日志 12$ export TF_LOG=TRACE$ export TF_LOG_PATH=/var/log/terraform.log 3、terraform 通过配置文件或者环境变量进行配置文件目录(自己创建) 1$ $HOME/.terraformrc 环境变量 1$ os.Setenv(&quot;TF_PLUGIN_CACHE_DIR&quot;, &quot;/tmp/provider&quot;) // add provider cache state文件存储，支持consul、oss等12345678910111213terraform &#123; backend &quot;consul&quot; &#123; address = &quot;consul.example.com&quot; scheme = &quot;https&quot; path = &quot;full/path&quot; &#125;&#125;data &quot;terraform_remote_state&quot; &quot;foo&quot; &#123; backend = &quot;consul&quot; config = &#123; path = &quot;full/path&quot; &#125;&#125; 参考： https://theithollow.com/2018/05/21/using-hashicorp-consul-to-store-terraform-state/ 语法 单行注释以 # 开头 多行注释用 /* 和 */ 换行 值使用 key = value 的语法分配（空格无关紧要）。该值可以是任何原语（字符串，数字，布尔值），列表或映射。 字符串为双引号。 字符串可以使用 ${} 包装的语法对其他值进行插值，例如 ${var.foo} 。此处记录了完整的内插语法。 多行字符串可以使用外壳样式的“ here doc”语法，该字符串以类似 &lt;&lt;EOF 的标记开头，然后以 EOF 结尾。字符串和结束标志的线路必须不能缩进。 假定数字以10为底。如果为数字加上 0x 前缀，则将其视为十六进制数字。 布尔值： true ， false 。 原始类型的列表可以用方括号（ [] ）制成。示例： [“foo”, “bar”, “baz”] 。 参考 https://runebook.dev/zh-CN/docs/terraform/-index-#Alicloud https://www.terraform.io/","categories":[{"name":"Cloud","slug":"Cloud","permalink":"https://acodetailor.github.io/categories/Cloud/"}],"tags":[{"name":"terraform","slug":"terraform","permalink":"https://acodetailor.github.io/tags/terraform/"}]}],"categories":[{"name":"k8s","slug":"k8s","permalink":"https://acodetailor.github.io/categories/k8s/"},{"name":"Cloud","slug":"Cloud","permalink":"https://acodetailor.github.io/categories/Cloud/"}],"tags":[{"name":"k8s","slug":"k8s","permalink":"https://acodetailor.github.io/tags/k8s/"},{"name":"terraform","slug":"terraform","permalink":"https://acodetailor.github.io/tags/terraform/"}]}